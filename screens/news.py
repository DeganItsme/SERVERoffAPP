from kivymd.uix.screen import MDScreen
from kivymd.uix.card import MDCard
from kivymd.uix.boxlayout import MDBoxLayout
from kivymd.uix.button import MDRaisedButton
from kivymd.uix.label import MDLabel
from kivymd.uix.toolbar import MDTopAppBar
from kivymd.uix.dialog import MDDialog
from kivymd.uix.textfield import MDTextField
from kivy.metrics import dp
from kivy.utils import get_color_from_hex
from utils.database import db
from utils.session import session

class NewsScreen(MDScreen):
    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        self.name = 'news'
        self.dialog = None
        self.build_ui()
    
    def build_ui(self):
        self.clear_widgets()
        
        main_layout = MDBoxLayout(orientation='vertical')
        
        # –í–µ—Ä—Ö–Ω—è—è –ø–∞–Ω–µ–ª—å
        toolbar = MDTopAppBar(
            title="üì∞ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç—è–º–∏",
            left_action_items=[["arrow-left", lambda x: self.go_back()]],
            elevation=4,
            md_bg_color=get_color_from_hex("#FF9800")
        )
        
        # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç —Å –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π
        from kivymd.uix.scrollview import MDScrollView
        scroll = MDScrollView()
        
        content = MDBoxLayout(
            orientation='vertical',
            padding=dp(20),
            spacing=dp(15),
            size_hint_y=None
        )
        content.bind(minimum_height=content.setter('height'))
        
        # –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–∏
        add_news_btn = MDRaisedButton(
            text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å",
            size_hint_x=0.8,
            pos_hint={'center_x': 0.5},
            md_bg_color=get_color_from_hex("#4CAF50"),
            size_hint_y=None,
            height=dp(50)
        )
        add_news_btn.bind(on_press=self.add_news)
        content.add_widget(add_news_btn)
        
        # –°–ø–∏—Å–æ–∫ –Ω–æ–≤–æ—Å—Ç–µ–π
        news_label = MDLabel(
            text="–ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏:",
            halign="left",
            theme_text_color="Primary",
            font_style="H6"
        )
        content.add_widget(news_label)
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        news_items = self.load_news()
        
        if not news_items:
            empty_label = MDLabel(
                text="–ù–æ–≤–æ—Å—Ç–µ–π –ø–æ–∫–∞ –Ω–µ—Ç",
                halign="center",
                theme_text_color="Secondary"
            )
            content.add_widget(empty_label)
        else:
            for news in news_items:
                news_card = MDCard(
                    orientation="vertical",
                    padding=dp(15),
                    size_hint_y=None,
                    height=dp(150),
                    elevation=2,
                    radius=[dp(12)]
                )
                
                news_title = MDLabel(
                    text=news[1],
                    halign="left",
                    theme_text_color="Primary",
                    font_style="H6"
                )
                
                news_content = MDLabel(
                    text=f"{news[2][:100]}..." if news[2] and len(news[2]) > 100 else news[2],
                    halign="left",
                    theme_text_color="Secondary"
                )
                
                news_info = MDLabel(
                    text=f"–ê–≤—Ç–æ—Ä: ID {news[3]} | –î–∞—Ç–∞: {news[6]}",
                    halign="left",
                    theme_text_color="Secondary",
                    font_style="Caption"
                )
                
                # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
                actions_layout = MDBoxLayout(
                    orientation='horizontal',
                    spacing=dp(10),
                    size_hint_y=None,
                    height=dp(40)
                )
                
                publish_btn = MDRaisedButton(
                    text="üì¢ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å" if not news[5] else "üëÅÔ∏è –°–Ω—è—Ç—å —Å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏",
                    size_hint_x=0.4,
                    md_bg_color=get_color_from_hex("#2196F3") if not news[5] else get_color_from_hex("#FF9800"),
                    size_hint_y=None,
                    height=dp(30)
                )
                publish_btn.bind(on_press=lambda x, n=news: self.toggle_publish(n))
                
                edit_btn = MDRaisedButton(
                    text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å",
                    size_hint_x=0.3,
                    md_bg_color=get_color_from_hex("#4CAF50"),
                    size_hint_y=None,
                    height=dp(30)
                )
                edit_btn.bind(on_press=lambda x, n=news: self.edit_news(n))
                
                delete_btn = MDRaisedButton(
                    text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å",
                    size_hint_x=0.3,
                    md_bg_color=get_color_from_hex("#FF5722"),
                    size_hint_y=None,
                    height=dp(30)
                )
                delete_btn.bind(on_press=lambda x, n=news: self.delete_news(n))
                
                actions_layout.add_widget(publish_btn)
                actions_layout.add_widget(edit_btn)
                actions_layout.add_widget(delete_btn)
                
                news_card.add_widget(news_title)
                news_card.add_widget(news_content)
                news_card.add_widget(news_info)
                news_card.add_widget(actions_layout)
                
                content.add_widget(news_card)
        
        scroll.add_widget(content)
        
        main_layout.add_widget(toolbar)
        main_layout.add_widget(scroll)
        
        self.add_widget(main_layout)
    
    def load_news(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        cursor = db.conn.cursor()
        cursor.execute('SELECT * FROM news ORDER BY created_at DESC')
        return cursor.fetchall()
    
    def add_news(self, instance):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏"""
        self.show_add_dialog()
    
    def edit_news(self, news):
        """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏"""
        self.show_edit_dialog(news)
    
    def toggle_publish(self, news):
        """–ü—É–±–ª–∏–∫–∞—Ü–∏—è/—Å–Ω—è—Ç–∏–µ —Å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"""
        new_status = 0 if news[5] else 1
        cursor = db.conn.cursor()
        cursor.execute('UPDATE news SET is_published = ? WHERE id = ?', (new_status, news[0]))
        db.conn.commit()
        
        action = "–æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞" if new_status else "—Å–Ω—è—Ç–∞ —Å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"
        self.show_dialog("–£—Å–ø–µ—Ö", f"–ù–æ–≤–æ—Å—Ç—å {action}")
        self.build_ui()
    
    def delete_news(self, news):
        """–£–¥–∞–ª–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏"""
        cursor = db.conn.cursor()
        cursor.execute('DELETE FROM news WHERE id = ?', (news[0],))
        db.conn.commit()
        
        self.show_dialog("–£—Å–ø–µ—Ö", "–ù–æ–≤–æ—Å—Ç—å —É–¥–∞–ª–µ–Ω–∞")
        self.build_ui()
    
    def show_add_dialog(self):
        """–î–∏–∞–ª–æ–≥ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–∏"""
        dialog_content = MDBoxLayout(orientation='vertical', spacing=dp(15), size_hint_y=None, height=dp(350))
        
        title_input = MDTextField(hint_text="–ó–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–æ–≤–æ—Å—Ç–∏")
        content_input = MDTextField(hint_text="–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏", multiline=True, size_hint_y=None, height=dp(150))
        
        dialog_content.add_widget(title_input)
        dialog_content.add_widget(content_input)
        
        self.dialog = MDDialog(
            title="–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å",
            type="custom",
            content_cls=dialog_content,
            buttons=[
                MDRaisedButton(
                    text="–î–æ–±–∞–≤–∏—Ç—å",
                    md_bg_color=get_color_from_hex("#4CAF50"),
                    on_release=lambda x: self.save_new_news(title_input.text, content_input.text)
                )
            ]
        )
        self.dialog.open()
    
    def save_new_news(self, title, content):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ–π –Ω–æ–≤–æ—Å—Ç–∏"""
        if title.strip() and content.strip():
            if session.is_logged_in():
                news_id = db.add_news(title, content, session.user_data['id'])
                if news_id:
                    self.show_dialog("–£—Å–ø–µ—Ö", "–ù–æ–≤–æ—Å—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∞")
                    self.dialog.dismiss()
                    self.build_ui()
                else:
                    self.show_dialog("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å")
        else:
            self.show_dialog("–û—à–∏–±–∫–∞", "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è")
    
    def show_edit_dialog(self, news):
        """–î–∏–∞–ª–æ–≥ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–∏"""
        dialog_content = MDBoxLayout(orientation='vertical', spacing=dp(15), size_hint_y=None, height=dp(350))
        
        title_input = MDTextField(hint_text="–ó–∞–≥–æ–ª–æ–≤–æ–∫", text=news[1])
        content_input = MDTextField(hint_text="–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ", text=news[2], multiline=True, size_hint_y=None, height=dp(150))
        
        dialog_content.add_widget(title_input)
        dialog_content.add_widget(content_input)
        
        self.dialog = MDDialog(
            title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤–æ—Å—Ç—å",
            type="custom",
            content_cls=dialog_content,
            buttons=[
                MDRaisedButton(
                    text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å",
                    md_bg_color=get_color_from_hex("#2196F3"),
                    on_release=lambda x: self.save_news_changes(news[0], title_input.text, content_input.text)
                )
            ]
        )
        self.dialog.open()
    
    def save_news_changes(self, news_id, title, content):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–æ–≤–æ—Å—Ç–∏"""
        if title.strip() and content.strip():
            cursor = db.conn.cursor()
            cursor.execute('UPDATE news SET title = ?, content = ? WHERE id = ?', (title, content, news_id))
            db.conn.commit()
            
            self.show_dialog("–£—Å–ø–µ—Ö", "–ù–æ–≤–æ—Å—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
            self.dialog.dismiss()
            self.build_ui()
        else:
            self.show_dialog("–û—à–∏–±–∫–∞", "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è")
    
    def show_dialog(self, title, text):
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–∏–∞–ª–æ–≥–æ–≤–æ–µ –æ–∫–Ω–æ"""
        if self.dialog:
            self.dialog.dismiss()
        
        self.dialog = MDDialog(
            title=title,
            text=text,
            size_hint=(0.8, 0.3)
        )
        self.dialog.open()
    
    def go_back(self):
        self.manager.current = 'dashboard'
    
    def on_enter(self):
        self.build_ui()